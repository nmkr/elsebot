/*
---------------------------------------------------------------
* ajaxloader.js - ajax content loader
* Version: 1.0
* Author: Martin Å najdr (@martinsnajdr, @bulbthemes on Twitter)
* Copyright (c) 2012 BulbThemes (http://www.bulbthemes.com)
---------------------------------------------------------------     
*/

//Namespace
window.ajaxLoader = {};

;(function ( $, window, document, undefined ) {
    
    ajaxLoader = function( el, options ) {
        this._init(el, options);
    }

    ajaxLoader.defaults = {
        debug: true,
        ajaxEnabled: true,
        ajaxEnabledIE: false,
        ajaxEnabledUntested: false,
        untestedPlatforms: /android|webos|windows phone|blackberry/i,
        wpSiteUrl: '',
        navWrappers: '#mobile-nav, #header, #footer',
        navLinkSelector: 'li.menu-item-object-page > a, .footer-widget > ul > li > a, .loader-link',
        rewriteSelector: 'a.loader-link, .recentcomments > a',
        placeholderSelector: '#loader-placeholder',
        animateRequest: true,
        animateScroll: false,
        //animateDuration: 1000,
        initRequest: function(){}, //Request started callback
        requestStarted: function(){}, //Request started callback
        requestDone: function(){}, //Request done callback
        requestError: function(){} //Request error callback
    };

    ajaxLoader.prototype = {
        constructor: ajaxLoader,
        _init: function( el, options ) {
            var instance = this;

            this.container = $(el);
            var options = instance.options = $.extend({}, ajaxLoader.defaults, options);

            //Determine if the ajaxloader is enabled
            if (this.options.ajaxEnabled == true) {
                if (this.options.ajaxEnabledIE == false && !history.pushState) {
                    this.options.ajaxEnabled = false;
                } else if (this.options.ajaxEnabledUntested == false && this.options.untestedPlatforms.test(navigator.userAgent.toLowerCase())) {
                    this.options.ajaxEnabled = false;
                }
            }

            //Return if ajaxloader is disabled
            if (this.options.ajaxEnabled == false) {
                instance.options.requestDone.call(this, instance); 
                return;
            }

            //Wordpress site url
            this.siteUrl = this.options.wpSiteUrl;

            //Caching the init url
            this.initUrl = window.location.href;
            this.initRequest = true;
            this.usePushState = false;

            this.queryString = undefined;
            this.origContent = undefined;
            this.currentLocation = undefined;
            this.scrollToElement = false;

            //Navigation selector 
            this.navigation = $('li.menu-item-object-page > a');
            this.reloadPartials = [];

            this._log('ajaxLoader: initialized');
            
            //Modern browser, use pushState?
            if (history.pushState) {
                this.usePushState = true;
                //full url, store it as querystring
                this.queryString = window.location.toString();

                var initState = ('state' in window.history);
                var fragment = (window.location.toString()).split(this.siteUrl);

                history.replaceState({path: document.location.href}, '', document.location.href);

                //Call finished to setup everything we need on init request 
                if (this.initRequest === true) {
                    this.options.initRequest.call(instance); 
                    this._finished();
                    this.initRequest = false;
                }

                //popState event fired 
                $(window).on('popstate', function(e) {
                    e.preventDefault();
                    //do not fire popstate on init
                    if(e.originalEvent.state !== null){
                        instance._request(e.originalEvent.state.path, true);
                    }

                    instance._log('ajaxLoader: popState event fired');
                    return false;              
                });
                 
                //Bind click event for all local links with specified class
                $(document).on('click', this.options.rewriteSelector, function(e) {
                    if (this.href !== window.location.href) {
                        if ($(this).attr('class')) {
                            if ($(this).attr('class').match(/partial-([\w'-]*)/g)) {   
                                var result = $(this).attr('class').match(/partial-([\w'-]*)/g);
                                for (var i = 0; i < result.length; i++) {
                                    var partialName = result[i].split(/partial-/);
                                    instance.reloadPartials[i] = partialName[1];
                                }
                            }

                            if ($(this).attr('class').match(/scroll-to-([\w'-]*)/g)) {   
                                var result = $(this).attr('class').match(/scroll-to-([\w'-]*)/g);
                                var scrollElementID = result[0].split(/scroll-to-/);
                                instance.scrollToElement = scrollElementID[1];
                            }
                        }
                        instance._request(this.href);
                    }
                    return false; 
                });
            } else {
                //No pushState, switch to hashChange
                if ($.param.fragment() == '') {
                    this.queryString = this.initUrl.split(this.siteUrl);
                    this.queryString = this.queryString[1];
                    if(this.queryString == '/#') {
                        this.queryString = '/';
                    }
                } else {
                    this.queryString = $.param.fragment();
                }
                
                //Rewrite navigation outside container - ../blog/ => ../#/blog/
                $(options.navLinkSelector).each(function() {
                    instance._rewrite(this);
                });

                //Redirect non-hashtag url to hashtag (www.example.com/blog/ => www.example.com/#/blog/)
                if (!this.queryString.match(/wp-admin/g)) {
                    window.location = (this.siteUrl + '/#' + this.queryString);
                    this.options.initRequest.call(instance);
                    this._request(instance.queryString);
                }

                //Hashchange specific actions
                $(document).on('click', options.rewriteSelector, function(e) {
                    if (this.href !== window.location.href) {
                        if ($(this).attr('class').match(/partial-([\w'-]*)/g)) {
                            var result = $(this).attr('class').match(/partial-([\w'-]*)/g);
                            for (var i = 0; i < result.length; i++) {
                                var partial = result[i].split(/partial-/);
                                var partialName = (partial[1]) ? partial[1] : partial;
                                instance.reloadPartials[i] = partialName;
                            };
                        }

                        if ($(this).attr('class').match(/scroll-to-([\w'-]*)/g)) {   
                            var result = $(this).attr('class').match(/scroll-to-([\w'-]*)/g);
                            var scrollElementID = result[0].split(/scroll-to-/);
                            instance.scrollToElement = scrollElementID[1];
                        }
                    }
                });

                //Hashchange event fired
                $(window).bind('hashchange', function(e) {
                    if ($.param.fragment() == '') {
                        instance.queryString = instance.initUrl.split(instance.siteUrl);
                        instance.queryString = instance.queryString[1];
                        if(instance.queryString == ''){
                            instance.queryString = '/';
                        }
                    } else {
                        instance.queryString = $.param.fragment();
                    }

                    instance._request(instance.queryString); 
                    instance._log('ajaxLoader: hashChange event fired');              
                }); 
            }

            $(document).on('submit', '.search-form', function(e) {
                e.preventDefault();
                var searchString = $(this).children('#s').val();

                if (!searchString) {
                    return false;
                }

                var searchTerm = '/?s='+(searchString.replace(/\s/g, '+')+'&submit=Search');
                $(this).children('#s').val('');

                if (history.pushState) {
                    instance._request(instance.siteUrl+searchTerm);
                } else {
                    window.location.hash = searchTerm;
                }
            });
        },

        _log: function() {
            if (this.options.debug !== true) {
                return;
            }

            var now = new Date();
            var timestamp = now.getHours() + ':' + ("0" + now.getMinutes()).slice(-2) + ':' + ("0" + now.getSeconds()).slice(-2) + ':' + now.getMilliseconds();

            if (window.console) {
                console.log(timestamp, Array.prototype.slice.call(arguments));
            }
        },

        _finished: function() {
            var instance = this;
            instance.options.requestDone.call(this, instance);
            instance._log('ajaxLoader: request finished');

            //instance._scrollTo();

            this.scrollToElement = false;

            if(instance.usePushState === false){
                $(this.options.rewriteSelector).each(function(){
                   instance._rewrite(this);
                });
            }
        },

        _process: function( response ) {
            var instance = this;

            var container = instance.container;
            var res = $($.trim(response));

            var partialsCount = this.reloadPartials.length;

            //Set new page title if available
            var newTitle = res.filter('#bulb_page_title');
            var newMetaDescription = res.filter('#bulb_meta_description');

            if (newTitle.length > 0) {
                 document.title = newTitle.val();
            }

            if (newMetaDescription.length > 0) {
                 $('meta[name=description]').attr('content', newMetaDescription.val());
            }

            if (partialsCount > 0) {
                var realPartialsCount = partialsCount;
                var j = 0; //successfull loop counter

                for (var i = 0; i < partialsCount; i++) {
                    var partialSelector = '#'+this.reloadPartials[i];
                    var partialEl, partialContent = null;

                    if (res.filter(partialSelector).length > 0) {
                        partialEl = res.filter(partialSelector); 
                        partialContent = partialEl.html();
                        j++;
                    } else if (res.find(partialSelector).html()) {
                        partialEl = res.find(partialSelector);
                        partialContent = partialEl.html();
                        j++;
                    } else {
                        realPartialsCount = realPartialsCount - 1;
                    } 

                    if (partialEl) {
                        $(partialSelector).hide();
                        $(partialSelector).html('');
                        $(partialSelector).html(partialContent);
                        $(partialSelector).fadeIn(0, function(){
                            //Last partial, we are done
                            if(realPartialsCount === j){
                                instance._finished();
                            }
                        });
                    } else {
                        if (realPartialsCount === j) {
                            instance._finished();
                        }
                    }

                    instance._log('ajaxLoader: partial ' + partialSelector + ' reloaded');
                };
        
                this.reloadPartials = [];
            } else {
                container.hide();
                container.html('');
                container.html(response);

                $(this.options.placeholderSelector).css('display', 'none'); 

                container.fadeIn(0, function() {
                    instance._finished();
                });
            }
        },

        _rewrite: function( link ) {
            //This function is used only when the browser does not support pushState
            var url = $(link).attr('href');
            //Already rewritten, no need to do it again
            if (url === null || url === undefined) {
                return;
            }
            else if (url.match(/\/#\//)) {
                return;
            }

            var slice_position = url.indexOf(this.siteUrl) + (this.siteUrl).length;
            var newUrl = url.slice(slice_position);

            if (newUrl === null || newUrl === '') {
                $(link).attr('href', this.siteUrl +'/#/');
            } else {
                $(link).attr('href', this.siteUrl +'/#'+ newUrl);
            }
        },

        _request: function( url, popState ) {
            //Data var
            var data = {};
            var timeStamp = new Date().getTime();

            //Use pushState if available and if the request was not created inside popstate event
            if (history.pushState && popState !== true) {
                history.pushState({path: (url)}, '', url);
            }

            //Is this just plain query string or full url
            if (url.match(this.siteUrl)) {
                this.queryString = url.split(this.siteUrl);
                this.queryString = this.queryString[1];
            } else {
                this.queryString = url;
            }

            //Call user callback for requestStarted
            this.options.requestStarted.call(this);

            data.request_url = this.queryString;

            if (this.queryString !== undefined) {
                //Caching this to use inside functions
                var instance = this;
                
                //Save original content                   
                if (this.origContent === undefined) {
                    this.origContent = this.container.html();
                }

                //Show the spinner
                var spinner = $('#loader').css('display', 'block');

                setTimeout(function() {
                    instance.currentLocation = window.location.toString();
                    var noCache = (data.request_url.match(/\?/)) ? '&no-cache=' + timeStamp : '?no-cache=' + timeStamp;
                    var requestURL = instance.siteUrl + data.request_url + noCache;

                    instance._log('ajaxLoader: '+ requestURL + ' requested'); 
                    
                    $.ajax({
                        type: 'GET',
                        url: requestURL,
                        data: data,
                        success: function(response) {
                            $('#loader').css('display', 'none');
                            instance.navigation.each(function(){
                                if($(this).parent('li').hasClass('current_page_item')){
                                    $(this).parent('li').removeClass('current_page_item');
                                }

                                if(($(this).attr('href')) == instance.currentLocation){
                                    $(this).parent('li').addClass('current_page_item');
                                }
                            });

                            instance._log('ajaxLoader: response recievied');
                            instance._process(response);
                        },
                        error: function(error) {
                            $('#loader').css('display', 'none');
                            var errorContent = $('#error404').html();

                            instance._log('ajaxLoader: error - '+ error.status.toString() + ' ' + error.statusText.toString());
                            instance._process(errorContent);
                            instance.options.requestError.call(this);
                        }
                    });
                }, 10);
            }
        },

        _scrollTo: function() {
            var instance = this;
            var url = window.location.toString();

            if (this.usePushState) {
                var scrollMatch = url.match(/http:\/\/[0-9a-z\?=\/]*\#([0-9a-z-]*)(\/|)$/);
            } else {
                var scrollMatch = url.match(/http:\/\/[0-9a-z-\/]*\/\#\/[0-9a-z\?=\/]*\#([0-9a-z-]*)(\/|)$/);
            }

            if (scrollMatch) {
                this.scrollToElement = scrollMatch[1];
            }

            var element = (this.scrollToElement !== false) ? '#' + this.scrollToElement : '#header';
            var offset = (element === '#header') ? 0 : 50;

            setTimeout(function(){
                //Element position
                var elPositionX =($(element).position()).left;
                var elPositionY =($(element).position()).top;
               
                //Request animated scroll
                if (instance.options.animateScroll !== true) {
                    $('html, body').scrollLeft(elPositionX + offset);
                    $('html, body').scrollTop(elPositionY + offset);
                } else {
                    $('html, body').animate({scrollLeft: elPositionX +'px'});
                    $('html, body').animate({scrollTop: elPositionY + offset +'px'});
                }

                instance._log('ajaxLoader: scroll to '+ element);
            }, 10);
        }
    }
})( jQuery, window , document );